sources:
https://stackoverflow.com/questions/58375806/getting-rotation-of-aranchor-from-didadd-anchors
https://medium.com/@egzonpllana/understanding-concurrency-in-swift-6-with-sendable-protocol-mainactor-and-async-await-5ccfdc0ca2b6
https://developer.apple.com/documentation/arkit/arconfiguration/worldalignment/gravity
https://developer.apple.com/documentation/arkit/arkit_in_ios/configuration_objects/understanding_world_tracking
https://developer.apple.com/videos/play/tech-talks/609/
https://stackoverflow.com/questions/71347327/realitykit-visualizing-grid-on-detected-planes
https://medium.com/@yatchoi/getting-started-with-arkit-real-life-waypoints-1707e3cb1da2
https://shiru99.medium.com/ar-with-ios-swiftui-arkit-realitykit-part-v-c3c89ad95b38
https://developer.apple.com/videos/play/wwdc2024/10100/?time=150
https://medium.com/@ivkuznetsov/arkit-lidar-building-point-clouds-in-swift-a4a948fe0cd2
https://medium.com/@d4sontiovino/implementing-focus-entity-in-swift-ar-a-simple-approach-0857d7dc7a10
https://shiru99.medium.com/ar-with-ios-swiftui-arkit-realitykit-part-v-c3c89ad95b38

import UIKit
import RealityKit
import ARKit

class ViewController: UIViewController, ARSessionDelegate {
    @IBOutlet var arView: ARView!

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Configure AR session
        let configuration = ARWorldTrackingConfiguration()
        configuration.planeDetection = [.horizontal, .vertical] // Include vertical planes
        configuration.sceneReconstruction = .meshWithClassification
        if ARWorldTrackingConfiguration.supportsSceneReconstruction(.meshWithClassification) {
            arView.session.run(configuration)
        }

        // Set AR session delegate
        arView.session.delegate = self
    }
    
    func session(_ session: ARSession, didAdd anchors: [ARAnchor]) {
        for anchor in anchors {
            guard let planeAnchor = anchor as? ARPlaneAnchor,
                  planeAnchor.alignment == .vertical else { continue }
            
            // Check if the detected plane is a ceiling
            if isCeiling(anchor: planeAnchor) {
                addRedPlane(for: planeAnchor)
            }
        }
    }
    
    func session(_ session: ARSession, didUpdate anchors: [ARAnchor]) {
        for anchor in anchors {
            guard let planeAnchor = anchor as? ARPlaneAnchor,
                  planeAnchor.alignment == .vertical else { continue }
            
            // Update the red plane if the plane anchor is updated
            updateRedPlane(for: planeAnchor)
        }
    }

    private func isCeiling(anchor: ARPlaneAnchor) -> Bool {
        // Logic to determine if a plane is the ceiling.
        // This might involve checking its position relative to the camera or other criteria.
        return anchor.center.y > 2.0 // Example: planes above 2 meters could be ceilings
    }

    private func addRedPlane(for planeAnchor: ARPlaneAnchor) {
        let planeEntity = ModelEntity(mesh: .generatePlane(width: planeAnchor.extent.x, height: planeAnchor.extent.z))
        planeEntity.model?.materials = [SimpleMaterial(color: .red, isMetallic: false)]

        let anchorEntity = AnchorEntity(anchor: planeAnchor)
        anchorEntity.addChild(planeEntity)
        arView.scene.addAnchor(anchorEntity)
    }
    
    private func updateRedPlane(for planeAnchor: ARPlaneAnchor) {
        guard let anchorEntity = arView.scene.findEntity(named: planeAnchor.identifier.uuidString) as? AnchorEntity,
              let planeEntity = anchorEntity.children.first as? ModelEntity else { return }
        
        // Update the plane's size and position
        planeEntity.model = ModelComponent(mesh: .generatePlane(width: planeAnchor.extent.x, height: planeAnchor.extent.z),
                                           materials: [SimpleMaterial(color: .red, isMetallic: false)])
        anchorEntity.transform = Transform(matrix: planeAnchor.transform)
    }
}
